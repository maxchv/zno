{"version":3,"sources":["components/NavBar.js","components/Home.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","open","handleDrawerOpen","bind","assertThisInitialized","handleDrawerClose","setState","pathname","location","_this$props","classes","theme","react_default","a","createElement","className","root","index_es","position","onClick","classNames","menuButton","hide","color","aria-label","Menu_default","variant","grow","drawer","anchor","paper","drawerPaper","drawerHeader","direction","ChevronLeft_default","ChevronRight_default","map","text","index","underline","link","key","component","RouterLink","to","button","selected","Inbox_default","Mail_default","primary","Component","withRouter","withStyles","flexGrow","marginLeft","marginRight","label","textTransform","display","width","flexShrink","alignItems","padding","justifyContent","textDecoration","fontWeight","currentLink","border","withTheme","Home","style","About","App","components_NavBar","react_router","exact","path","Boolean","window","hostname","match","ReactDOM","render","react_router_dom","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b49c285d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {\r\n    AppBar, Toolbar, Typography, Button,\r\n    IconButton, Drawer, Divider,\r\n    List, ListItem, ListItemIcon, ListItemText, Link\r\n} from '@material-ui/core';\r\nimport { Link as RouterLink, withRouter } from 'react-router-dom';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport InboxIcon from \"@material-ui/icons/Inbox\";\r\nimport MailIcon from \"@material-ui/icons/Mail\";\r\n\r\n\r\nconst drawerWidth = 250;\r\nconst styles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginLeft: -12,\r\n        marginRight: 20,\r\n    },\r\n    // button: {\r\n    //     // background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n    //     // borderRadius: 3,\r\n    //     border: 0,\r\n    //     // color: 'white',\r\n    //     width: '100%',\r\n    //     margin: 0,\r\n    //     display: 'flex',\r\n    //     padding: '5px 30px',\r\n    //     // boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n    // },\r\n    label: {\r\n        textTransform: 'capitalize',\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: '0 8px',\r\n        // ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    link: {\r\n        textDecoration: 'none',\r\n        fontWeight: 'bold'\r\n    },\r\n    currentLink: {\r\n        border: '1px solid gray'\r\n    }\r\n});\r\n\r\nclass NavBar extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { open: false };\r\n\r\n        this.handleDrawerOpen = this.handleDrawerOpen.bind(this);\r\n        this.handleDrawerClose = this.handleDrawerClose.bind(this);\r\n    }\r\n\r\n    handleDrawerOpen() {\r\n        this.setState({ open: true });\r\n    };\r\n\r\n    handleDrawerClose() {\r\n        this.setState({ open: false });\r\n    };\r\n\r\n    render() {\r\n\r\n        const { pathname } = this.props.location;\r\n        // console.log({pathname});\r\n\r\n\r\n        const { classes, theme } = this.props;\r\n        const { open } = this.state;\r\n        return (\r\n            <div className={classes.root}>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar >\r\n                        <IconButton\r\n                            onClick={this.handleDrawerOpen}\r\n                            className={classNames(classes.menuButton, open && classes.hide)} color=\"inherit\" aria-label=\"Menu\">\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n                            ZNO\r\n                        </Typography>\r\n                        <Button color=\"inherit\">Login</Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                <Drawer\r\n                    className={classes.drawer}\r\n                    variant=\"persistent\"\r\n                    anchor=\"left\"\r\n                    open={open}\r\n                    classes={{\r\n                        paper: classes.drawerPaper,\r\n                    }}\r\n                >\r\n                    <div className={classes.drawerHeader}>\r\n                        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n                            ZNO\r\n                        </Typography>\r\n                        <IconButton onClick={this.handleDrawerClose}>\r\n                            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n                        </IconButton>\r\n                    </div>\r\n                    <Divider />\r\n                    <List>\r\n                        {['Home', 'About'].map((text, index) => (\r\n                            <Link underline='none' className={classes.link} key={text} component={RouterLink} to={\"/\" + text}>\r\n                                <ListItem button selected={\"/\" + text === pathname || (pathname === '/' && text === 'Home')} >\r\n                                    <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                                    <ListItemText primary={text} />\r\n                                </ListItem>\r\n                            </Link>\r\n                        ))}\r\n                    </List>\r\n                    {/* <Divider />\r\n                    <List>\r\n                        {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n                            <ListItem button key={text}>\r\n                                <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n                                <ListItemText primary={text} />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List> */}\r\n                </Drawer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nNavBar.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    theme: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withRouter(withStyles(styles, { withTheme: true })(NavBar));\r\n","import React, { Component } from \"react\";\r\n\r\nclass Home extends Component {\r\n\r\n    render() {\r\n        return (<div style={{border:'1px solid black'}}>\r\n            HOME\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from \"react\";\r\n\r\nclass About extends Component {\r\n\r\n    render() {\r\n        return (<div style={{border:'1px solid red'}}>\r\n            About\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport NavBar from \"./components/NavBar\";\r\nimport Home from './components/Home';\r\nimport About from './components/About';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<NavBar />\r\n\t\t\t<Route exact path='/' component={Home} />\r\n\t\t\t<Route path='/Home/' component={Home} />\r\n\t\t\t<Route path='/About/' component={About} />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<BrowserRouter> <App /></BrowserRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}